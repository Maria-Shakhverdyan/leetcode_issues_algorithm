// Given a string containing digits from 2-9 inclusive, return all possible letter
// combinations that the number could represent. Return the answer in any order.
// A mapping of digits to letters (just like on the telephone buttons) is given below.
// Note that 1 does not map to any letters.
// Example 1:

// Input: digits = "23"
// Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

// Example 2:
// Input: digits = ""
// Output: []

#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

class Solution {
public:
    std::vector<std::string> letterCombinations(std::string digits) {
        std::vector<std::string> result;
        if (digits.empty()) return result;
        
        std::unordered_map<char, std::> digitToLetters = {
            {'2', "abc"},
            {'3', "def"},
            {'4', "ghi"},
            {'5', "jkl"},
            {'6', "mno"},
            {'7', "pqrs"},
            {'8', "tuv"},
            {'9', "wxyz"}
        };
        
        std::string combination;
        generateCombinations(digits, 0, combination, result, digitToLetters);
        return result;
    }
    
private:
    void generateCombinations(const std::string& digits, int index, std::string& combination, std::vector<std::string>& result, const std::unordered_map<char, std::string>& digitToLetters) {
        if (index == digits.length()) {
            result.push_back(combination);
            return;
        }
        
        char digit = digits[index];
        const std::string& letters = digitToLetters.at(digit);
        for (char letter : letters) {
            combination.push_back(letter);
            generateCombinations(digits, index + 1, combination, result, digitToLetters);
            combination.pop_back();
        }
    }
};

int main() {
    Solution solution;
    std::string digits;
    std::cout << "Enter digits: ";
    std::cin >> digits;
    
    std::vector<std::string> combinations = solution.letterCombinations(digits);
    
    std::cout << "Letter combinations: ";
    for (const std::string& combo : combinations) {
        std::cout << combo << " ";
    }
    std::cout << std::endl;
    
    return 0;
}
