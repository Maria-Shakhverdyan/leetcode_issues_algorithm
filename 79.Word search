
//Given an m x n grid of characters board and a string word, return true if word exists in the grid.
//The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();
        
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dfs(board, word, i, j, 0)) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
private:
    bool dfs(vector<vector<char>>& board, string& word, int i, int j, int k) {
        if (i < 0 || j < 0 || i >= board.size() || j >= board[0].size() || board[i][j] != word[k]) {
            return false;
        }
        
        if (k == word.length() - 1) {
            return true;
        }
        
        char temp = board[i][j];
        board[i][j] = '*'; // Mark as visited
        
        bool found = dfs(board, word, i + 1, j, k + 1) ||
                     dfs(board, word, i - 1, j, k + 1) ||
                     dfs(board, word, i, j + 1, k + 1) ||
                     dfs(board, word, i, j - 1, k + 1);
        
        board[i][j] = temp;
        return found;
    }
};

int main() {
    int m, n;
    cout << "Enter the number of rows and columns of the board: ";
    cin >> m >> n;

    vector<vector<char>> board(m, vector<char>(n));
    cout << "Enter the characters of the board:\n";
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> board[i][j];
        }
    }

    string word;
    cout << "Enter the word to search for: ";
    cin >> word;

    Solution sol;
    if (sol.exist(board, word)) {
        cout << "True\n";
    } else {
        cout << "False\n";
    }

    return 0;
}
