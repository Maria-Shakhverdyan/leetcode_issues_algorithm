// surrounded-regions - Given an m x n matrix board containing 'X' and 'O', capture all regions that
// are 4-directionally surrounded by 'X'.
// A region is captured by flipping all 'O's into 'X's in that surrounded region.
#include <iostream>
#include <vector>

class Solution {
    public:
    void DFS(std::vector<std::vector<char>>& board, int i, int j){
        int m = board.size();
        int n = board[0].size();
        
        if (i < 0 || i >= m || j < 0 || j >= n || board[i][j] != 'O')
            return;

        board[i][j] = 'T'; //Transition - mark as visited

        
        DFS(board, i + 1, j);
        DFS(board, i - 1, j);
        DFS(board, i, j + 1);
        DFS(board, i, j - 1);
    }
    
    void solve(std::vector<std::vector<char>>& board){
        int m = board.size();
        int n = board[0].size();
        
        //first and last columns
        for(int i = 0; i < m; ++i){
            DFS(board, i, 0);
            DFS(board, i, n - 1);
        }
        
        //first and last rows
        for(int j = 0; j < n; ++j){
            DFS(board, 0, j);
            DFS(board, m - 1, j);
        }
        
        // O -> X
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
                    else if(board[i][j] == 'T'){
                        board[i][j] = 'O';
                    }
            }
        }
    }
};

int main() {
    int m, n;
    std::cin >> m >> n;
    
    std::vector<std::vector<char>> board(m, std::vector<char>(n));
    
    for(int i = 0; i < m; ++i){
        for(int j = 0; j < n; ++j){
            std::cin >> board[i][j];
        }
    }
    
    Solution().solve(board);
    
    std::cout << "\n";
    for(int i = 0; i < board.size(); ++i){
        for(int j = 0; j < board[i].size(); ++j){
            std::cout << board[i][j] << " ";
        }
        std::cout << std::endl;
    }
    
    return 0;
}
