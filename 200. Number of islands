// Given an m x n 2D binary grid grid which represents a map of '1's (land) and
// '0's (water), return the number of islands.
// An island is surrounded by water and is formed by connecting adjacent
// lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
#include <iostream>
#include <vector>

class Solution{
    public:
    int numIslands(std::vector<std::vector<char>>& grid){
        if(grid.empty() || grid[0].empty()){
            return 0;
        }
    
    int m = grid.size();
    int n = grid[0].size();
    int numIslands = 0;
    
    for(int i = 0; i < m; ++i){
        for(int j = 0; j < n; j++){
            if(grid[i][j] == '1'){
                ++numIslands;
                dfs(grid, i, j);
            }
        }
    }
    return numIslands;
}

    void dfs(std::vector<std::vector<char>>& grid, int i, int j){
        int m = grid.size();
        int n = grid[0].size();
        
        if(i < 0 || i >= m || j < 0 || j >= n || grid[i][j] != '1'){
            return;
        }
        grid[i][j] = '0'; //mark as visited
        
        dfs(grid, i + 1, j);
        dfs(grid, i - 1, j);
        dfs(grid, i, j + 1);
        dfs(grid, i, j - 1);
    }
};

int main(){
    Solution sol;
    
    int m, n;
    std::cin >> m >> n;
    
    std::vector<std::vector<char>> grid(m, std::vector<char>(n));
    for(int i = 0; i < m; ++i){
        for(int j = 0; j < n; ++j){
            std::cin >> grid[i][j];
        }
    }
    
    int islands = sol.numIslands(grid);
    std::cout << "Num of islands " << islands << std::endl;
    
    return 0;
}
